#------------------------------------------------------------------------------
#                                BSP MAKEFILE
#
# This makefile was automatically generated by the nios2-bsp-generate-files
# command. Its purpose is to build a custom Board Support Package (BSP)
# targeting a specific Nios II processor in an SOPC Builder-based design.
#
# To create an application or library Makefile which uses this BSP, try the
# nios2-app-generate-makefile or nios2-lib-generate-makefile commands.
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
#                                 TOOLS
#------------------------------------------------------------------------------

MKDIR := mkdir -p
ECHO := echo
SPACE := $(empty) $(empty)

#------------------------------------------------------------------------------
#                         The adjust-path macro
# 
# If COMSPEC is defined, Make is launched from Windows through
# Cygwin.  This adjust-path macro will call 'cygpath -u' on all
# paths to ensure they are readable by Make.
#
# If COMSPEC is not defined, Make is launched from *nix, and no adjustment
# is necessary
#------------------------------------------------------------------------------

ifndef COMSPEC
ifdef ComSpec
COMSPEC = $(ComSpec)
endif # ComSpec
endif # !COMSPEC

ifdef COMSPEC
	adjust-path = $(subst $(SPACE),\$(SPACE),$(shell cygpath -u "$1"))
	adjust-path-mixed = $(subst $(SPACE),\$(SPACE),$(shell cygpath -m "$1"))
else
	adjust-path = $(subst $(SPACE),\$(SPACE),$1)
	adjust-path-mixed = $(subst $(SPACE),\$(SPACE),$1)
endif

#------------------------------------------------------------------------------
#                               DEFAULT TARGET
#
# The default target, "all", must appear before any other target in the
# Makefile. Note that extra prerequisites are added to the "all" rule later.
#------------------------------------------------------------------------------
.PHONY: all
all:
	@$(ECHO) [BSP build complete]


#------------------------------------------------------------------------------
#                           PATHS & DIRECTORY NAMES
#
# Explicitly locate absolute path of the BSP root
#------------------------------------------------------------------------------

BSP_ROOT_DIR := .

# Define absolute path to the root of the BSP.
ABS_BSP_ROOT := $(call adjust-path-mixed,$(shell pwd))

# Stash all BSP object files here
OBJ_DIR := ./obj


#-------------------------------------------------------------------------------
#                             TOOL & COMMAND DEFINITIONS
# 
# The base command for each build operation are expressed here. Additional
# switches may be expressed here. They will run for all instances of the 
# utility.
#-------------------------------------------------------------------------------

# Archiver command. Creates library files. 
AR = riscv32-unknown-elf-ar

# Assembler command. Note that CC is used for .S files. 
AS = riscv32-unknown-elf-gcc

# Custom flags only passed to the archiver. This content of this variable is 
# directly passed to the archiver rather than the more standard "ARFLAGS". The 
# reason for this is that GNU Make assumes some default content in ARFLAGS. 
# This setting defines the value of BSP_ARFLAGS in Makefile. 
BSP_ARFLAGS = -src

# C/C++ compiler optimization level. "-O0" = no optimization,"-O2" = "normal" 
# optimization, etc. "-O0" is recommended for code that you want to debug since 
# compiler optimization can remove variables and produce non-sequential 
# execution of code while debugging. This setting defines the value of 
# BSP_CFLAGS_OPTIMIZATION in Makefile. 
BSP_CFLAGS_OPTIMIZATION = -Os

# C/C++ compiler warning level. "-Wall" is commonly used.This setting defines 
# the value of BSP_CFLAGS_WARNINGS in Makefile. 
BSP_CFLAGS_WARNINGS = -Wall

# C compiler command. 
CC = riscv32-unknown-elf-gcc -xc

# C++ compiler command. 
CXX = riscv32-unknown-elf-gcc -xc++

# Command used to remove files during 'clean' target. 
RM = rm -f


#-------------------------------------------------------------------------------
#                            BSP SOURCE FILE LISTING
# 
# All source files that comprise the BSP are listed here, along with path 
# information to each file expressed relative to the BSP root. The precise 
# list and location of each file is derived from the driver, operating system, 
# or software package source file declarations.
#
# Following specification of the source files for each component, driver, etc.,
# each source file type (C, assembly, etc.) is concatenated together and used
# to construct a list of objects. Pattern rules to build each object are then
# used to build each file.
#-------------------------------------------------------------------------------

altera_avalon_timer_driver_C_LIB_SRCS := \
	drivers/src/timer.c

hal_C_LIB_SRCS := \
	HAL/src/alt_dev_llist_insert.c \
	HAL/src/alt_errno.c \
	HAL/src/alt_flash_dev.c \
	HAL/src/alt_main.c

i2c_opencores_driver_C_LIB_SRCS := \
	drivers/src/i2c_opencores.c

sdc_controller_SRCS := \
	drivers/src/mmc.c \
	drivers/src/ocsdc.c

# Assemble all component C source files 
COMPONENT_C_LIB_SRCS += \
	$(altera_avalon_timer_driver_C_LIB_SRCS) \
	$(i2c_opencores_driver_C_LIB_SRCS) \
	$(sdc_controller_SRCS)

# Assemble all component assembly source files 
COMPONENT_ASM_LIB_SRCS += \

# Assemble all component C++ source files 
COMPONENT_CPP_LIB_SRCS += \

#------------------------------------------------------------------------------
#                                 PUBLIC.MK
#
# The generated public.mk file contains BSP information that is shared with
# other external makefiles, such as a Nios II application makefile. System-
# dependent information such as hardware-specific compiler flags and
# simulation file generation are stored here.
#
# In addition, public.mk contains include paths that various software,
# such as a device driver, may need for the C compiler. These paths are
# written to public.mk with respect to the BSP root. In public.mk, each
# path is prefixed with a special variable, $(ALT_LIBRARY_ROOT_DIR). The
# purpose of this variable is to allow an external Makefile to append on
# path information to precisely locate paths expressed in public.mk
# Since this is the BSP Makefile, we set ALT_LIBRARY_ROOT_DIR to point right
# here ("."), at the BSP root. 
#
# ALT_LIBRARY_ROOT_DIR must always be set before public.mk is included.
#------------------------------------------------------------------------------
ALT_LIBRARY_ROOT_DIR := .
include public.mk


#------------------------------------------------------------------------------
#                                FLAGS
#
# Include paths for BSP files are written into the public.mk file and must
# be added to the existing list of pre-processor flags. In addition, "hooks"
# for standard flags left intentionally empty (CFLAGS, CPPFLAGS, ASFLAGS,
# and CXXFLAGS) are provided for conveniently adding to the relevant flags
# on the command-line or via script that calls make.
#------------------------------------------------------------------------------
# Assemble final list of compiler flags from generated content
BSP_CFLAGS += \
  $(BSP_CFLAGS_DEFINED_SYMBOLS) \
  $(BSP_CFLAGS_UNDEFINED_SYMBOLS) \
  $(BSP_CFLAGS_OPTIMIZATION) \
  $(BSP_CFLAGS_DEBUG) \
  $(BSP_CFLAGS_WARNINGS) \
  $(BSP_CFLAGS_USER_FLAGS) \
  $(ALT_CFLAGS) \
  $(CFLAGS) 

# Make ready the final list of include directories and other C pre-processor
# flags. Each include path is made ready by prefixing it with "-I".
BSP_CPPFLAGS += \
  $(addprefix -I, $(BSP_INC_DIRS)) \
  $(addprefix -I, $(ALT_INCLUDE_DIRS)) \
  $(ALT_CPPFLAGS) \
  $(CPPFLAGS)

# Finish off assembler flags with any user-provided flags
BSP_ASFLAGS += $(ASFLAGS)

# Finish off C++ flags with any user-provided flags
BSP_CXXFLAGS += $(CXXFLAGS)

# And finally, the ordered list
C_SRCS += $(GENERATED_C_LIB_SRCS) \
          $(COMPONENT_C_LIB_SRCS)

CXX_SRCS += $(GENERATED_CPP_LIB_SRCS) \
          $(COMPONENT_CPP_LIB_SRCS)

ASM_SRCS += $(GENERATED_ASM_LIB_SRCS) \
            $(COMPONENT_ASM_LIB_SRCS)


#------------------------------------------------------------------------------
#                         LIST OF GENERATED FILES
#
# A Nios II BSP relies on the generation of several source files used
# by both the BSP and any applications referencing the BSP.
#------------------------------------------------------------------------------


GENERATED_H_FILES := $(ABS_BSP_ROOT)/system.h

GENERATED_LINKER_SCRIPT := $(ABS_BSP_ROOT)/linker.x

GENERATED_FILES += $(GENERATED_H_FILES)


#------------------------------------------------------------------------------
#                        SETUP TO BUILD OBJECTS
#
# List of object files which are to be built. This is constructed from the input
# list of C source files (C_SRCS), C++ source files (CXX_SRCS), and assembler
# source file (ASM_SRCS). The permitted file extensions are:
#
# .c .C                       - for C files
# .cxx .cc .cpp .CXX .CC .CPP - for C++ files
# .S .s                       - for assembly files
#
# Extended description: The list of objects is a sorted list (duplicates
# removed) of all possible objects, placed beneath the ./obj directory,
# including any path information stored in the "*_SRCS" variable. The
# "patsubst" commands are used to concatenate together multiple file suffix
# types for common files (i.e. c++ as .cxx, .cc, .cpp).
#
# File extensions are case-insensitive in build rules with the exception of
# assembly sources. Nios II assembly sources with the ".S" extension are first
# run through the C preprocessor. Sources with the ".s" extension are not.
#------------------------------------------------------------------------------
OBJS = $(sort $(addprefix $(OBJ_DIR)/,                                        \
               $(patsubst %.c, %.o,   $(patsubst %.C, %.o, $(C_SRCS)))        \
               $(patsubst %.cxx, %.o, $(patsubst %.CXX, %.o,                  \
               $(patsubst %.cc, %.o,  $(patsubst %.CC, %.o,                   \
               $(patsubst %.cpp, %.o, $(patsubst %.CPP, %.o,                  \
                 $(CXX_SRCS) ))))))                                           \
               $(patsubst %.S, %.o, $(patsubst %.s, %.o, $(ASM_SRCS))) ))

# List of dependancy files for each object file.
DEPS = $(OBJS:.o=.d)


# Rules to force your project to rebuild or relink
# .force_relink file will cause any application that depends on this project to relink 
# .force_rebuild file will cause this project to rebuild object files
# .force_rebuild_all file will cause this project and any project that depends on this project to rebuild object files

FORCE_RELINK_DEP  := .force_relink
FORCE_REBUILD_DEP := .force_rebuild
FORCE_REBUILD_ALL_DEP := .force_rebuild_all
FORCE_REBUILD_DEP_LIST := $(FORCE_RELINK_DEP) $(FORCE_REBUILD_DEP) $(FORCE_REBUILD_ALL_DEP)

$(FORCE_REBUILD_DEP_LIST):

$(OBJS): $(wildcard $(FORCE_REBUILD_DEP)) $(wildcard $(FORCE_REBUILD_ALL_DEP))


#------------------------------------------------------------------------------
#                          BUILD RULES: ALL & CLEAN
#------------------------------------------------------------------------------
.DELETE_ON_ERROR:

.PHONY: all
all: build_pre_process
all: Makefile $(GENERATED_FILES) $(BSP_LIB) $(NEWLIB_DIR)
all: build_post_process


# clean: remove .o/.a/.d
.PHONY: clean
clean:
	@$(RM) -r $(BSP_LIB) $(OBJ_DIR) $(FORCE_REBUILD_DEP_LIST)
ifneq ($(wildcard $(NEWLIB_DIR)),)
	@$(RM) -r $(NEWLIB_DIR)
endif
	@$(ECHO) [BSP clean complete]

#------------------------------------------------------------------------------
#                           BUILD PRE/POST PROCESS
#------------------------------------------------------------------------------
build_pre_process :
	$(BUILD_PRE_PROCESS)

build_post_process :
	$(BUILD_POST_PROCESS)

.PHONY: build_pre_process build_post_process



#------------------------------------------------------------------------------
#                     PATTERN RULES TO BUILD OBJECTS
#------------------------------------------------------------------------------
$(OBJ_DIR)/%.o: %.c
	@$(ECHO) Compiling $(<F)...
	@$(MKDIR) $(@D)
	$(CC_PRE_PROCESS)
	$(CC) -MP -MMD -c $(BSP_CPPFLAGS) $(BSP_CFLAGS) -o $@ $<
	$(CC_POST_PROCESS)

$(OBJ_DIR)/%.o: %.C
	@$(ECHO) Compiling $(<F)...
	@$(MKDIR) $(@D)
	$(CC_PRE_PROCESS)
	$(CC) -MP -MMD -c $(BSP_CPPFLAGS) $(BSP_CFLAGS) -o $@ $<
	$(CC_POST_PROCESS)

$(OBJ_DIR)/%.o: %.cpp
	@$(ECHO) Compiling $(<F)...
	@$(MKDIR) $(@D)
	$(CXX_PRE_PROCESS)
	$(CXX) -MP -MMD -c $(BSP_CPPFLAGS) $(BSP_CXXFLAGS) $(BSP_CFLAGS) -o $@ $<
	$(CXX_POST_PROCESS)

$(OBJ_DIR)/%.o: %.CPP
	@$(ECHO) Compiling $(<F)...
	@$(MKDIR) $(@D)
	$(CXX_PRE_PROCESS)
	$(CXX) -MP -MMD -c $(BSP_CPPFLAGS) $(BSP_CXXFLAGS) $(BSP_CFLAGS) -o $@ $<
	$(CXX_POST_PROCESS)

$(OBJ_DIR)/%.o: %.cc
	@$(ECHO) Compiling $(<F)...
	@$(MKDIR) $(@D)
	$(CXX_PRE_PROCESS)
	$(CXX) -MP -MMD -c $(BSP_CPPFLAGS) $(BSP_CXXFLAGS) $(BSP_CFLAGS) -o $@ $<
	$(CXX_POST_PROCESS)

$(OBJ_DIR)/%.o: %.CC
	@$(ECHO) Compiling $(<F)...
	@$(MKDIR) $(@D)
	$(CXX_PRE_PROCESS)
	$(CXX) -MP -MMD -c $(BSP_CPPFLAGS) $(BSP_CXXFLAGS) $(BSP_CFLAGS) -o $@ $<
	$(CXX_POST_PROCESS)

$(OBJ_DIR)/%.o: %.cxx
	@$(ECHO) Compiling $(<F)...
	@$(MKDIR) $(@D)
	$(CXX_PRE_PROCESS)
	$(CXX) -MP -MMD -c $(BSP_CPPFLAGS) $(BSP_CXXFLAGS) $(BSP_CFLAGS) -o $@ $<
	$(CXX_POST_PROCESS)

$(OBJ_DIR)/%.o: %.CXX
	@$(ECHO) Compiling $(<F)...
	@$(MKDIR) $(@D)
	$(CXX_PRE_PROCESS)
	$(CXX) -MP -MMD -c $(BSP_CPPFLAGS) $(BSP_CXXFLAGS) $(BSP_CFLAGS) -o $@ $<
	$(CXX_POST_PROCESS)

$(OBJ_DIR)/%.o: %.S
	@$(ECHO) Compiling $(<F)...
	@$(MKDIR) $(@D)
	$(AS_PRE_PROCESS)
	$(AS) -MP -MMD -c $(BSP_CFLAGS) $(BSP_CPPFLAGS) $(BSP_ASFLAGS) -o $@ $<
	$(AS_POST_PROCESS)

$(OBJ_DIR)/%.o: %.s
	@$(ECHO) Compiling $(<F)...
	@$(MKDIR) $(@D)
	$(AS_PRE_PROCESS)
	$(AS) -MP -MMD -c $(BSP_ASFLAGS) $(BSP_CFLAGS) -o $@ $<
	$(AS_POST_PROCESS)

# Pattern rules for making useful intermediate files
$(OBJ_DIR)/%.s: %.c
	@$(ECHO) Compiling $(<F) to assembler...
	@$(MKDIR) $(@D)
	$(CC_PRE_PROCESS)
	$(CC) -MP -MMD -c $(BSP_CPPFLAGS) $(BSP_CFLAGS) -o $@ $<
	$(CC_POST_PROCESS)

$(OBJ_DIR)/%.s: %.cpp
	@$(ECHO) Compiling $(<F) to assembler...
	@$(MKDIR) $(@D)
	$(CXX_PRE_PROCESS)
	$(CXX) -MP -MMD -c $(BSP_CPPFLAGS) $(BSP_CXXFLAGS) $(BSP_CFLAGS) -o $@ $<
	$(CXX_PRE_PROCESS)

$(OBJ_DIR)/%.s: %.cc
	@$(ECHO) Compiling $(<F) to assembler...
	@$(MKDIR) $(@D)
	$(CXX_PRE_PROCESS)
	$(CXX) -MP -MMD -c $(BSP_CPPFLAGS) $(BSP_CXXFLAGS) $(BSP_CFLAGS) -o $@ $<
	$(CXX_PRE_PROCESS)

$(OBJ_DIR)/%.s: %.cxx
	@$(ECHO) Compiling $(<F) to assembler...
	@$(MKDIR) $(@D)
	$(CXX_PRE_PROCESS)
	$(CXX) -MP -MMD -c $(BSP_CPPFLAGS) $(BSP_CXXFLAGS) $(BSP_CFLAGS) -o $@ $<
	$(CXX_PRE_PROCESS)

$(OBJ_DIR)/%.i: %.c
	@$(ECHO) Compiling $(<F) to assembler...
	@$(MKDIR) $(@D)
	$(CC_PRE_PROCESS)
	$(CC) -E $(CPPFLAGS) $(ALT_CFLAGS) $(CFLAGS) -o $@ $<
	$(CC_PRE_PROCESS)

$(OBJ_DIR)/%.i: %.cpp
	@$(ECHO) Compiling $(<F) to assembler...
	@$(MKDIR) $(@D)
	$(CXX_PRE_PROCESS)
	$(CXX) -MP -MMD -c $(BSP_CPPFLAGS) $(BSP_CXXFLAGS) $(BSP_CFLAGS) -o $@ $<
	$(CXX_PRE_PROCESS)

$(OBJ_DIR)/%.i: %.cc
	@$(ECHO) Compiling $(<F) to assembler...
	@$(MKDIR) $(@D)
	$(CXX_PRE_PROCESS)
	$(CXX) -MP -MMD -c $(BSP_CPPFLAGS) $(BSP_CXXFLAGS) $(BSP_CFLAGS) -o $@ $<
	$(CXX_PRE_PROCESS)

$(OBJ_DIR)/%.i: %.cxx
	@$(ECHO) Compiling $(<F) to assembler...
	@$(MKDIR) $(@D)
	$(CXX_PRE_PROCESS)
	$(CXX) -MP -MMD -c $(BSP_CPPFLAGS) $(BSP_CXXFLAGS) $(BSP_CFLAGS) -o $@ $<
	$(CXX_PRE_PROCESS)

# Pattern rules for building other object files.
%.o: %.c
	@$(ECHO) Compiling $(<F)...
	@$(MKDIR) $(@D)
	$(CC_PRE_PROCESS)
	$(CC) -MP -MMD -c $(CPPFLAGS) $(ALT_CFLAGS) $(CFLAGS) -o $@ $<
	$(CC_POST_PROCESS)

%.o: %.cpp
	@$(ECHO) Compiling $(<F)...
	@$(MKDIR) $(@D)
	$(CXX_POST_PROCESS)
	$(CXX) -MP -MMD -c $(BSP_CPPFLAGS) $(BSP_CXXFLAGS) $(BSP_CFLAGS) -o $@ $<
	$(CXX_POST_PROCESS)

%.o: %.cc
	@$(ECHO) Compiling $(<F)...
	@$(MKDIR) $(@D)
	$(CXX_POST_PROCESS)
	$(CXX) -MP -MMD -c $(BSP_CPPFLAGS) $(BSP_CXXFLAGS) $(BSP_CFLAGS) -o $@ $<
	$(CXX_POST_PROCESS)

%.o: %.cxx
	@$(ECHO) Compiling $(<F)...
	@$(MKDIR) $(@D)
	$(CXX_PRE_PROCESS)
	$(CXX) -MP -MMD -c $(BSP_CPPFLAGS) $(BSP_CXXFLAGS) $(BSP_CFLAGS) -o $@ $<
	$(CXX_POST_PROCESS)

%.o: %.S
	@$(ECHO) Compiling $(<F)...
	@$(MKDIR) $(@D)
	$(AS_PRE_PROCESS)
	$(AS) -MP -MMD -c $(BSP_CFLAGS) $(BSP_CPPFLAGS) $(BSP_ASFLAGS) -o $@ $<
	$(AS_POST_PROCESS)

%.o: %.s
	@$(ECHO) Compiling $(<F)...
	@$(MKDIR) $(@D)
	$(AS_PRE_PROCESS)
	$(AS) -MP -MMD -c $(BSP_ASFLAGS) $(BSP_CFLAGS) -o $@ $<
	$(AS_POST_PROCESS)


#------------------------------------------------------------------------------
#                               NEWLIB RULES
#------------------------------------------------------------------------------

ifneq ($(COMPILE_NEWLIB),)
NEWLIB_FLAGS += $(BSP_CFLAGS)
endif

ifneq ($(NEWLIB_DIR),)
$(NEWLIB_DIR):
	@$(ECHO) Creating $(NEWLIB_DIR)...
	nios2-newlib-gen --no-multilib $(NEWLIB_DIR)-build-tmp $(NEWLIB_DIR) --custom "$(NEWLIB_FLAGS)"		
	@$(ECHO) Removing $(NEWLIB_DIR)-build-tmp...
	@$(RM) -rf $(NEWLIB_DIR)-build-tmp
endif

#------------------------------------------------------------------------------
#                               LIBRARY RULES
#------------------------------------------------------------------------------
$(BSP_LIB): $(OBJS)
	@$(ECHO) Creating $@...
	$(AR_PRE_PROCESS)
	$(RM) -f $@
	$(AR) $(BSP_ARFLAGS) $@ $^
	$(AR_POST_PROCESS)


#------------------------------------------------------------------------------
#                                DEPENDENCY FILES
#------------------------------------------------------------------------------
ifneq ($(findstring clean, $(MAKECMDGOALS)),clean)
-include $(DEPS)
endif

# End of Makefile


